{"version":3,"sources":["components/Alert.jsx","components/Navbar.jsx","components/TextForm.jsx","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","id","onClick","toggleMode","htmlFor","defaultProps","TextForm","useState","text","setText","style","background","color","heading","value","onChange","e","target","rows","showAlert","navigator","clipboard","writeText","newText","split","join","length","App","setMode","setAlert","message","setTimeout","about","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c2165efd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Alert = (props) => {\r\n\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type}`} role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong>  : {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\n\r\nconst Navbar = (props) => {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n            </li>\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode === \"dark\" ? \"light\" : \"dark\"}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav >\r\n  )\r\n}\r\n\r\nexport default Navbar;\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Title\"\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nconst TextForm = (props) => {\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setText(e.target.value)\r\n  }\r\n\r\n  const ChangeUpperCase = () => {\r\n    setText(text.toUpperCase());\r\n    props.showAlert(\"Converted to Uppercase!\", \"success\");\r\n  }\r\n\r\n  const ChangeLowerCase = () => {\r\n    setText(text.toLowerCase());\r\n    props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n  }\r\n\r\n  const ClearText = () => {\r\n    setText(\"\");\r\n    props.showAlert(\"Text Cleared!\", \"success\");\r\n  }\r\n\r\n  const CopyText = () => {\r\n    navigator.clipboard.writeText(text);\r\n    props.showAlert(\"Copied to Clipboard!\", \"success\");\r\n  }\r\n\r\n  const RemoveExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed!\", \"success\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\" style={{\r\n      background: props.mode === \"dark\" ? \"#042743\" : \"white\",\r\n      color: props.mode === \"dark\" ? \"white\" : \"black\"\r\n    }}>\r\n      <div className=\"my-3\">\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleChange}\r\n            id=\"myBox\"\r\n            rows={8}\r\n            style={{\r\n              background: props.mode === \"dark\" ? \"gray\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\"\r\n            }} />\r\n        </div>\r\n        <button className=\"btn btn-primary m-1\" onClick={ChangeUpperCase}>Change to Upper Case</button>\r\n        <button className=\"btn btn-primary m-1\" onClick={ChangeLowerCase}>Change to Lower Case</button>\r\n        <button className=\"btn btn-primary m-1\" onClick={ClearText}>Clear Text</button>\r\n        <button className=\"btn btn-primary m-1\" onClick={CopyText}>Copy Text</button>\r\n        <button className=\"btn btn-primary m-1\" onClick={RemoveExtraSpaces}>Remove Extra Spaces</button>\r\n      </div>\r\n      <div className=\"container\">\r\n        <h2>Your Text Summary</h2>\r\n        <p><b>Total Words:</b> {text.length < 1 ? 0 : text.split(\" \").length}</p>\r\n        <p><b>Total Characters:</b> {text.length}</p>\r\n        <p><b>Total Time to read:</b> {0.008 * text.split(\" \").length} Minutes</p>\r\n        <h2>Preview</h2>\r\n        <p> {text.length === 0 ? \"No text to display\" : text}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TextForm;\r\n","import { useState } from 'react';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\nfunction App() {\n\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.background = \"#042743\";\n      showAlert(\"Dark Mode has been Enable\", \"success\");\n    }\n    else {\n      setMode(\"light\");\n      document.body.style.background = \"white\";\n      showAlert(\"Light Mode has been Enable\", \"success\");\n    }\n  }\n\n  return (\n    <div>\n      <Navbar title=\"TextUtils\" about=\"About TextUtils\" mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}